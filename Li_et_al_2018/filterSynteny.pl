#!/usr/bin/perl -w

#Use: perl filterSynteny.pl INPUT_FILE_NAME OUTPUT_FILE_NAME NUMBER_OF_DIFFERENT_GENES_TO_DISCARD
#The input file can be generated by COGE or standalone DAGchainer
#A simple script for removing redundant syntenic results from DAGchainer-like output
#Duplicate chains and subsets are removed
#By setting $num_genes to i, chains that only differ by i genes from a previously encountered one will be discarded too
#The longest chain is always kept
 


$inputFile = $ARGV[0];
$outputFile = $ARGV[1];
$num_genes = $ARGV[2];

open FH1, '<', "$inputfile";
open OUT1, '>', "$outputfile";

$n = 0;
%chains = ();
%scafs = ();
%allChains = ();
while (<FH1>)
{
	$line = $_;
	chomp $line;
	if ($line =~ m/^#.+/)
	{
		$n++;
	}
#This regex is set up to work with COGE DAGchainer output using relative gene order
	elsif ($line =~ m/\S+_(\S+)\s+\S+\s+(\d+)\s+\d+\s+\S+_(\S+)\s+\S+\s+(\d+)\s+\d+\s+\S+\s+\d+/)
	{
		$s1 = $1;
		$g1 = $2;
		$s2 = $3;
		$g2 = $4;
		push @{$allChains{$n}}, $line;
		$scafs{$n}{s1} = $s1;
		$scafs{$n}{s2} = $s2;
		push @{$chains{$n}{$s1}}, $g1;
		push @{$chains{$n}{$s2}}, $g2;
	}
}
close FH1;

%toDelete = ();

for $i (1..($n-1))
{
	if (exists $scafs{$i}{s1})
	{
		for $j (($i+1)..$n)
		{
			if ($i != $j)
			{
				if (exists $scafs{$j}{s1})
				{
					#print "$scafs{$i}{s1}\t$scafs{$j}{s1}\t$scafs{$i}{s2}\t$scafs{$j}{s2}\n";
					if ((($scafs{$i}{s1} eq $scafs{$j}{s1}) and ($scafs{$i}{s2} eq $scafs{$j}{s2})) or (($scafs{$i}{s1} eq $scafs{$j}{s2}) and ($scafs{$i}{s2} eq $scafs{$j}{s1})))
					{
						$chainlength1 = 0;
						$chainlength2 = 0;
						$genediffs = 0;
						foreach $gene1 (@{$chains{$i}{$scafs{$i}{s1}}})
						{
							$chainlength1++;
						}
						foreach $gene2 (@{$chains{$j}{$scafs{$j}{s1}}})
						{
							$chainlength2++;
						}
						if ($chainlength1 >= $chainlength2)
						{
							%temp = ();
							foreach $gene1 (@{$chains{$i}{$scafs{$i}{s1}}})
							{
								$temp{$gene1} = 1;
							}
							foreach $gene1 (@{$chains{$i}{$scafs{$i}{s2}}})
							{
								$temp{$gene1} = 1;
							}
							foreach $gene2 (@{$chains{$j}{$scafs{$j}{s1}}})
							{
								if (! exists $temp{$gene2})
								{
									$genediffs++;
								}
							}
							foreach $gene2 (@{$chains{$j}{$scafs{$j}{s2}}})
							{
								if (! exists $temp{$gene2})
								{
									$genediffs++;
								}
							}
							if ($genediffs <= $num_genes)
							{
								delete $scafs{$j}{s1};
								delete $scafs{$j}{s2};
							}
						}
						elsif ($chainlength1 < $chainlength2)
						{
							%temp = ();
							foreach $gene1 (@{$chains{$j}{$scafs{$j}{s1}}})
							{
								$temp{$gene1} = 1;
							}
							foreach $gene1 (@{$chains{$j}{$scafs{$j}{s2}}})
							{
								$temp{$gene1} = 1;
							}
							foreach $gene2 (@{$chains{$i}{$scafs{$i}{s1}}})
							{
								if (! exists $temp{$gene2})
								{
									$genediffs++;
								}
							}
							foreach $gene2 (@{$chains{$i}{$scafs{$i}{s2}}})
							{
								if (! exists $temp{$gene2})
								{
									$genediffs++;
								}
							}
							if ($genediffs <= $num_genes)
							{
								delete $scafs{$i}{s1};
								delete $scafs{$i}{s2};
							}
						}
					}
				}
			}
		}
	}
}

for $i (1..$n)
{
	if (exists $scafs{$i}{s1})
	{
		print OUT1 "###\n";
		foreach $chain (@{$allChains{$i}})
		{
			print OUT1 "$chain\n";
		}
	}
}
close OUT1;
exit;
